#服务器绑定端口号
server.socket.port=80
#连接指示的最大队列长度
server.socket.backlog=100

#Socket超时关闭，单位为毫秒，0为关闭无限大
server.socket.timeout=20000
#Socket Channel Read Buffer 读数据的缓冲区，每个ByteBuffer的大小，每个连接都会从对象池获取一个
server.channel.buffer=8KB
#Socket Channel 读数据的缓冲区是否采用直接内存
server.channel.direct=true

#Socket Channel 与服务器维持TCP Socket链接的最大个数,因为每一个Socket都需要为它分配一个ByteBuffer用来读写，该数字直接影响ByteBuffer Pool的大小
#Websocket服务器可能需要设置大点，2000-6000，因为浏览器需要不限时地维持链接
#Http Server没必要设置太大，因为如果一个Http 1.1重用Socket请求完所有资源后，${server.socket.timeout}服务器会自动关闭连接释放资源
server.channel.maxActive=500
#如果后台的Socket容量不够，最多等待多少毫秒，如果该毫秒过后还是无法创建ByteBuffer，那就立即关闭Socket
server.channel.maxWait=1000

#工作线程数量,如果不填，或则天0则用CachedThreadPool，如果大于0则是固定线程池FixedThreadPool
server.process.workers=50

#服务器名称
server.name=xiaofangzi
#服务器编解码字符集
server.http.charset=UTF-8
#Http 请求包头最大限制，支持5MB、5KB、5B 等方案
server.http.maxHeaderSize=4KB
#Http 请求包体最大限制，支持5MB、5KB、5B 等方案
server.http.maxContextSize=10MB

#Http 目录默认访问
server.http.index=index.html

#Http 动态请求处理器与后缀
server.http.dynamic.suffix=.do
server.http.dynamic.handler=cannon.server.controller.ControllerMessageHandler

#是否启动静态文件处理能力
#server.http.static.open=false

#Http 静态请求缓存目录，由于Java 对磁盘IO性能没有C++高，如果每次请求多读取磁盘性能就远不如Nignx，但是将所有静态资源Cache到内存，那就不比Nignx差了
#server.http.static.dir=
#静态文件的过期时间，这个配置可设置也可不设置，单位为秒，当设置之后，浏览器再访问静态文件后，3600秒内会直接读取本地缓存
#server.http.static.expire=3600

#Unsuported Configs
#是否定时检查缓存中的静态文件更新或则被删除，单位为秒
#server.http.static.check=4